# -*- coding: utf-8 -*-
"""N gramasColocaciones.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1lF9KqqXYmglhI3t0GiRVQvuD3ZI00FSr
"""

!git clone https://github.com/maryhc/opinion.git
#%cd /content
#!git pull

import re, string, unicodedata
import nltk
from nltk import FreqDist
from nltk.util import ngrams
nltk.download('book')
from nltk.book import *
nltk.download('punkt')
import matplotlib.pyplot as plt
import numpy as np
import pandas as pd
import plotly.express as px

#file_name = open('/content/opinion/corpus/tweets.txt').read()
#file_name_mod = file_name.replace(".txt","")
file_name_mod = "tweetsn.txt"
mod_file = open(file_name_mod,"w")
raw_file = open('/content/opinion/corpus/tweets.txt').read()

for x in raw_file:
		xf = x.replace("!"," ")
		xf = x.lower()
		mod_file.write(xf)

def remove_non_ascii(words):
    new_words = []
    for word in words:
        new_word = unicodedata.normalize('NFKD', word).encode('ascii', 'ignore').decode('utf-8', 'ignore')
        new_words.append(new_word)
    return new_words

sample = open('/content/tweetsn.txt').read()
words = nltk.word_tokenize(sample)
words = remove_non_ascii(words)
#sample
md_bigrams = list(bigrams(words))
fdist = FreqDist(md_bigrams)

fdist.most_common(10)

fdist.plot(10)

#bigramas
threshold = 2
filtered_bigrams = [bigram for bigram in md_bigrams if len(bigram[0])>threshold and len(bigram[1])>threshold]
filtered_bigrams_dist = FreqDist(filtered_bigrams)

filtered_palabras = [palabra for palabra in words if len(palabra) > threshold]
filtered_palabra_dist = FreqDist(filtered_palabras)

df = pd.DataFrame()
df['bi_gramas'] = list(set(filtered_bigrams))
df['palabra_0'] = df['bi_gramas'].apply(lambda x: x[0])
df['palabra_1'] = df['bi_gramas'].apply(lambda x: x[1])
df['bi_gram_freq'] = df['bi_gramas'].apply(lambda x: filtered_bigrams_dist[x])
df['palabra_0_freq'] = df['palabra_0'].apply(lambda x: filtered_palabra_dist[x])
df['palabra_1_freq'] = df['palabra_1'].apply(lambda x: filtered_palabra_dist[x])

df['PMI'] = df[['bi_gram_freq','palabra_0_freq','palabra_1_freq']].apply(lambda x: np.log2(x.values[0]/(x.values[1]*x.values[2])), axis = 1)
df['log(bi_gram_freq)'] = df['bi_gram_freq'].apply(lambda x: np.log2(x))
df

fig = px.scatter(x = df['PMI'].values,y = df['log(bi_gram_freq)'], color = df['PMI'] + df['log(bi_gram_freq)'],
                 hover_name = df['bi_gramas'], width= 600, height= 600, labels = {'x':'PMI', 'y':'Log(Bigram frecuencia)'})
fig.show()

#Mdidas preconsrtuidas
from nltk.collocations import *
bigram_measure = nltk.collocations.BigramAssocMeasures()
finder = BigramCollocationFinder.from_words(words)

finder.apply_freq_filter(20)
finder.nbest(bigram_measure.pmi, 10)